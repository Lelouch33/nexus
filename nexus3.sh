#!/bin/bash

set -e

BASE_DIR="$HOME/nexus-nodes"
WATCHTOWER_DIR="$HOME/watchtower"

YELLOW='\033[1;33m'
GREEN='\033[1;32m'
RED='\033[1;31m'
BLUE='\033[1;34m'
NC='\033[0m'

NODE_NAME=""
NODE_ID=""

show_logo() {
  echo -e "\n\n${NC}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–∞–º–∏ Nexus${NC}"
  curl -s https://raw.githubusercontent.com/pittpv/nexus-node/refs/heads/main/other/logo.sh | bash
}

print_menu() {
  show_logo
  echo ""
  echo -e "${NC}========= –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–∞–º–∏ Nexus =========${NC}"
  echo -e "${YELLOW}1) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã${NC}"
  echo "2) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)"
  echo -e "${GREEN}3) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É Nexus${NC}"
  echo "4) –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –Ω–æ–¥—ã (–ª–æ–≥–∏)"
  echo -e "${RED}5) –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É Nexus${NC}"
  echo "6) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–æ–¥—ã"
  echo "7) –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–æ–¥—ã"
  echo "8) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Swap-—Ñ–∞–π–ª"
  echo "9) –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤"
  echo -e "${RED}0) –í—ã—Ö–æ–¥${NC}"
  echo -e "${NC}===============================================${NC}"
  echo -n "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: "
}

check_docker_installed() {
  if ! command -v docker &>/dev/null; then
    echo -e "${RED}Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é 2 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker.${NC}"
    return 0
  fi
  return 0
}

install_docker() {
  echo -e "${GREEN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...${NC}"
  if ! command -v docker &>/dev/null; then
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
  else
    echo "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  fi

  if ! docker compose version &>/dev/null; then
    echo -e "${GREEN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose...${NC}"
    sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
  else
    echo "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  fi
  echo -e "${GREEN}Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.${NC}"
}

install_watchtower_if_needed() {
  if [ ! -f "$WATCHTOWER_DIR/docker-compose.yml" ]; then
    mkdir -p "$WATCHTOWER_DIR"

    echo -e "${YELLOW}–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ Watchtower...${NC}"
    docker pull containrrr/watchtower:latest

    cat > "$WATCHTOWER_DIR/docker-compose.yml" <<EOF
services:
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_LABEL_ENABLE=true
EOF

    (cd "$WATCHTOWER_DIR" && docker compose up -d)
    echo -e "${GREEN}Watchtower —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
  fi
}

prompt_node_config() {
  echo "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è NODE_ID:"
  echo "1) –ò–∑ —Ñ–∞–π–ª–∞ nexus-nodes.txt"
  echo "2) –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
  read -rp "–í–∞—à –≤—ã–±–æ—Ä [1 –∏–ª–∏ 2]: " choice

  NODE_IDS=()
  NODE_COUNT=0

  if [[ "$choice" == "1" ]]; then
    if [[ -f "nexus-nodes.txt" ]]; then
      mapfile -t NODE_IDS < nexus-nodes.txt
      NODE_COUNT=${#NODE_IDS[@]}
      echo -e "${GREEN}–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª nexus-nodes.txt (–Ω–∞–π–¥–µ–Ω–æ NODE_ID: $NODE_COUNT).${NC}"
    else
      echo -e "${RED}–§–∞–π–ª nexus-nodes.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ NODE_ID (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).${NC}"
      return 0
    fi
  elif [[ "$choice" == "2" ]]; then
    echo -n "–°–∫–æ–ª—å–∫–æ –Ω–æ–¥ Nexus —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1]: "
    read -r NODE_COUNT
    [[ ! "$NODE_COUNT" =~ ^[1-9][0-9]*$ ]] && NODE_COUNT=1
  else
    echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.${NC}"
    return 0
  fi

  echo -n "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ –Ω–æ–¥—É [1-8, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1]: "
  read -r THREADS
  [[ ! "$THREADS" =~ ^[1-8]$ ]] && THREADS=1

  echo -e "${GREEN}–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ nexusxyz/nexus-cli:latest...${NC}"
  docker pull nexusxyz/nexus-cli:latest

  for ((n=1; n<=NODE_COUNT; n++)); do
    if [[ "$choice" == "1" && ${#NODE_IDS[@]} -ge n ]]; then
      NODE_ID="${NODE_IDS[$((n-1))]}"
      echo "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è NODE_ID –∏–∑ —Ñ–∞–π–ª–∞: $NODE_ID"
    else
      echo -n "–í–≤–µ–¥–∏—Ç–µ NODE_ID: "
      read -r NODE_ID
      while [[ -z "$NODE_ID" ]]; do
        echo -n "NODE_ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞: "
        read -r NODE_ID
      done
    fi

    SAFE_NODE_ID=$(echo "$NODE_ID" | tr -c 'a-zA-Z0-9_.-' '-')
    SAFE_NODE_ID=$(echo "$SAFE_NODE_ID" | sed -E 's/^-+//; s/-+$//; s/-+/-/g')
    NODE_NAME="nexus-$SAFE_NODE_ID"
    NODE_DIR="$BASE_DIR/$NODE_NAME"

    if [[ -d "$NODE_DIR" ]]; then
      echo -e "${YELLOW}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $NODE_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –Ω–æ–¥—É.${NC}"
      continue
    fi

    mkdir -p "$NODE_DIR"
    echo -e "\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ $NODE_NAME"

    cat > "$NODE_DIR/.env" <<EOF
NODE_ID=$NODE_ID
MAX_THREADS=$THREADS
EOF

    cat > "$NODE_DIR/docker-compose.yml" <<EOF
services:
  nexus-node:
    container_name: $NODE_NAME
    restart: unless-stopped
    image: nexusxyz/nexus-cli:latest
    init: true
    command: start --node-id \${NODE_ID} --max-threads \${MAX_THREADS}
    stdin_open: true
    tty: true
    env_file:
      - .env
    labels:
      - com.centurylinklabs.watchtower.enable=true
EOF

    (cd "$NODE_DIR" && docker compose up -d)
    echo -e "${GREEN}–ù–æ–¥–∞ '$NODE_NAME' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞.${NC}"
  done
}

install_nexus_node() {
  check_docker_installed || return
  install_watchtower_if_needed
  prompt_node_config
}

select_node() {
  nodes=($(ls "$BASE_DIR" 2>/dev/null))
  if [ ${#nodes[@]} -eq 0 ]; then
    echo -e "${RED}‚ùå –ù–æ–¥—ã Nexus –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.${NC}"
    echo ""
    return 1
  fi

  echo -e "\n${BLUE}–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–¥—É:${NC}"
  for i in "${!nodes[@]}"; do
    node_name="${nodes[$i]}"
    container_status=$(docker ps -a --format '{{.Names}}' | grep -w "$node_name" &>/dev/null && echo "‚úÖ" || echo "‚ùå")
    echo -e "  $((i+1))) ${GREEN}${node_name}${NC} $container_status"
  done
  echo -e "  $(( ${#nodes[@]} + 1 ))) ${YELLOW}–í—Å–µ –Ω–æ–¥—ã${NC}"
  echo -e "  0) ${YELLOW}–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é${NC}"

  while true; do
    echo -ne "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: "
    read -r choice

    if [[ "$choice" =~ ^[0-9]+$ ]]; then
      if [ "$choice" -eq 0 ]; then
        return 1
      elif [ "$choice" -le ${#nodes[@]} ]; then
        NODE_NAME="${nodes[$((choice-1))]}"
        return 0
      elif [ "$choice" -eq $(( ${#nodes[@]} + 1 )) ]; then
        NODE_NAME="ALL"
        return 0
      fi
    fi
    echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ $((${#nodes[@]} + 1)).${NC}"
  done
}

remove_node() {
  if ! select_node; then
    return
  fi

  if [ "$NODE_NAME" = "ALL" ]; then
    echo -e "${YELLOW}–£–¥–∞–ª–∏—Ç—å –í–°–ï –Ω–æ–¥—ã? [y/N]: ${NC}"
    read -r confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
      echo -e "${YELLOW}–û—Ç–º–µ–Ω–∞.${NC}"
      return
    fi

    for dir in "$BASE_DIR"/*; do
      [ -d "$dir" ] || continue
      (cd "$dir" && docker compose down -v)
      rm -rf "$dir"
      echo -e "${GREEN}–£–¥–∞–ª–µ–Ω–æ: $(basename "$dir")${NC}"
    done

    if [ -d "$BASE_DIR" ] && [ -z "$(ls -A "$BASE_DIR")" ]; then
      rm -rf "$BASE_DIR"
      echo -e "${GREEN}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$BASE_DIR' —É–¥–∞–ª–µ–Ω–∞.${NC}"
    fi
  else
    NODE_DIR="$BASE_DIR/$NODE_NAME"
    (cd "$NODE_DIR" && docker compose down -v)
    rm -rf "$NODE_DIR"
    echo -e "${GREEN}–ù–æ–¥–∞ '$NODE_NAME' —É–¥–∞–ª–µ–Ω–∞.${NC}"
  fi

  if [ -d "$WATCHTOWER_DIR" ]; then
    echo -ne "${YELLOW}–£–¥–∞–ª–∏—Ç—å Watchtower? [y/N]: ${NC}"
    read -r confirm
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
      (cd "$WATCHTOWER_DIR" && docker compose down -v)
      rm -rf "$WATCHTOWER_DIR"
      echo -e "${GREEN}Watchtower —É–¥–∞–ª—ë–Ω.${NC}"
    else
      echo -e "${YELLOW}Watchtower —Å–æ—Ö—Ä–∞–Ω—ë–Ω.${NC}"
    fi
  fi
}

stop_containers() {
  if ! select_node; then
    return
  fi

  if [ "$NODE_NAME" = "ALL" ]; then
    echo -e "${YELLOW}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –í–°–ï–• –Ω–æ–¥...${NC}"
    for dir in "$BASE_DIR"/*; do
      [ -d "$dir" ] || continue
      (cd "$dir" && docker compose down)
      echo -e "${GREEN}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $(basename "$dir")${NC}"
    done
  else
    (cd "$BASE_DIR/$NODE_NAME" && docker compose down)
    echo -e "${GREEN}–ù–æ–¥–∞ '$NODE_NAME' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.${NC}"
  fi
}

start_containers() {
  if ! select_node; then
    return
  fi

  if [ "$NODE_NAME" = "ALL" ]; then
    echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ –í–°–ï–• –Ω–æ–¥...${NC}"
    for dir in "$BASE_DIR"/*; do
      [ -d "$dir" ] || continue
      (cd "$dir" && docker compose up -d)
      echo -e "${GREEN}–ó–∞–ø—É—â–µ–Ω–∞: $(basename "$dir")${NC}"
    done
  else
    (cd "$BASE_DIR/$NODE_NAME" && docker compose up -d)
    echo -e "${GREEN}–ù–æ–¥–∞ '$NODE_NAME' –∑–∞–ø—É—â–µ–Ω–∞.${NC}"
  fi
}

attach_nexus_container() {
    echo -e "${GREEN}üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º Nexus —á–µ—Ä–µ–∑ tmux...${NC}"

    if ! command -v tmux &> /dev/null; then
        echo -e "${RED}‚ùå tmux –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.${NC}"
        return 0
    fi

    containers=($(docker ps --format "{{.Names}}" | grep "nexus" | sort))
    total=${#containers[@]}

    if [ $total -eq 0 ]; then
        echo -e "${RED}‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Nexus.${NC}"
        return
    fi

    echo -e "${GREEN}üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $total.${NC}"

    max_per_session=4
    session_count=$(( (total + max_per_session - 1) / max_per_session ))

    echo -e "${YELLOW}üß≠ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π tmux: $session_count.${NC}"
    echo
    echo -e "${GREEN}‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ tmux:${NC}"
    echo -e "   Ctrl+b ‚Üí o ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏"
    echo -e "   Ctrl+b ‚Üí w ‚Äî —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω"
    echo -e "   Ctrl+b ‚Üí d ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏"
    echo
    echo -e "${YELLOW}‚è≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥... Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã.${NC}"
    sleep 5

    session_ids=()
    container_index=1

    for ((s=0; s<session_count; s++)); do
        session_name="nexus_attach_$((s+1))"
        session_ids+=("$session_name")

        if tmux has-session -t "$session_name" 2>/dev/null; then
            echo -e "${YELLOW}üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é '$session_name'...${NC}"
            tmux kill-session -t "$session_name"
            sleep 1
        fi

        echo -e "üõ† –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é $session_name..."

        start=$((s * max_per_session))
        group=("${containers[@]:$start:$max_per_session}")

        tmux new-session -d -s "$session_name" -n "[${container_index}] ${group[0]}" "docker attach ${group[0]}"
        ((container_index++))

        for ((i=1; i<${#group[@]}; i++)); do
            tmux split-window -h -t "$session_name"
            tmux send-keys -t "$session_name" "clear; echo \"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä [${container_index}] ${group[$i]}\"; docker attach ${group[$i]}" C-m
            ((container_index++))
        done

        tmux select-layout -t "$session_name" tiled
    done

    echo
    echo -e "${GREEN}üöÄ –°–µ—Å—Å–∏–∏ tmux –≥–æ—Ç–æ–≤—ã.${NC}"
    echo -e "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: ${BLUE}tmux attach -t session_name${NC}"
    for sid in "${session_ids[@]}"; do
        echo -e "  üëâ  ${BLUE}tmux attach -t $sid${NC}"
    done

    echo
    echo -e "${GREEN}‚ÑπÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏: ${BLUE}${session_ids[0]}${NC}"
    sleep 2

    tmux attach -t "${session_ids[0]}"
}

create_swap() {
  echo ""

  if swapon --show | grep -q '^/swapfile'; then
    SWAP_ACTIVE=true
    SWAP_SIZE=$(swapon --show --bytes | awk '/\/swapfile/ { printf "%.0f", $3 / 1024 / 1024 }')
    echo -e "${YELLOW}–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π swap-—Ñ–∞–π–ª: /swapfile (${SWAP_SIZE} MB)${NC}"
  else
    SWAP_ACTIVE=false
    echo -e "${YELLOW}–ê–∫—Ç–∏–≤–Ω—ã–π swap-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.${NC}"

    if [ -f /swapfile ]; then
      SWAP_INACTIVE_SIZE=$(ls -lh /swapfile | awk '{print $5}')
      echo -e "${YELLOW}–ù–∞–π–¥–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π swap-—Ñ–∞–π–ª: /swapfile (${SWAP_INACTIVE_SIZE}).${NC}"

      echo -n "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ? [y/N]: "
      read -r activate_choice
      if [[ "$activate_choice" =~ ^[Yy]$ ]]; then
        sudo mkswap /swapfile
        sudo swapon /swapfile
        echo -e "${GREEN}Swap-—Ñ–∞–π–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.${NC}"

        if grep -i -q microsoft /proc/version; then
          echo -n "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É swap –≤ /etc/wsl.conf? [y/N]: "
          read -r wsl_startup
          if [[ "$wsl_startup" =~ ^[Yy]$ ]]; then
            sudo mkdir -p /etc
            if ! grep -q '^\[boot\]' /etc/wsl.conf 2>/dev/null; then
              echo -e "\n[boot]" | sudo tee -a /etc/wsl.conf > /dev/null
            fi
            if ! grep -q 'swapon /swapfile' /etc/wsl.conf 2>/dev/null; then
              echo 'command = "swapon /swapfile"' | sudo tee -a /etc/wsl.conf > /dev/null
              echo -e "${GREEN}–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ /etc/wsl.conf.${NC}"
            else
              echo -e "${YELLOW}–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –µ—Å—Ç—å –≤ /etc/wsl.conf.${NC}"
            fi
            echo " "
            echo -e "${NC}–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:${NC}"
            echo -e "${YELLOW}1. –í—ã–π–¥–∏—Ç–µ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ (–æ–ø—Ü–∏—è 0)"
            echo -e "2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ PowerShell/CMD: ${GREEN}wsl --shutdown${YELLOW}"
            echo -e "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ WSL${NC}"
            echo -e "${YELLOW}–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...${NC}"
            sleep 10
            return
          fi
        else
          if ! grep -q '/swapfile' /etc/fstab; then
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab > /dev/null
            echo -e "${GREEN}–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ /etc/fstab.${NC}"
          else
            echo -e "${YELLOW}Swap —É–∂–µ –µ—Å—Ç—å –≤ /etc/fstab.${NC}"
          fi
        fi
        return
      else
        echo -n "–£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π swap-—Ñ–∞–π–ª? [y/N]: "
        read -r remove_choice
        if [[ "$remove_choice" =~ ^[Yy]$ ]]; then
          sudo rm -f /swapfile
          sudo sed -i '/\/swapfile/d' /etc/fstab
          echo -e "${GREEN}–§–∞–π–ª —É–¥–∞–ª—ë–Ω.${NC}"
        else
          echo -e "${YELLOW}–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.${NC}"
        fi
        return
      fi
    fi
  fi

  echo -e "${NC}---------- –ú–µ–Ω—é Swap-—Ñ–∞–π–ª–∞ ----------"
  echo "1) –°–æ–∑–¥–∞—Ç—å Swap 8GB"
  echo "2) –°–æ–∑–¥–∞—Ç—å Swap 16GB"
  echo "3) –°–æ–∑–¥–∞—Ç—å Swap 32GB"
  echo "4) –£–¥–∞–ª–∏—Ç—å Swap-—Ñ–∞–π–ª"
  echo -e "${RED}0) –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é${NC}"
  echo -e "${NC}------------------------------------"
  echo -n "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: "
  read -r swap_choice

  case $swap_choice in
    1) SWAP_SIZE_MB=8192 ;;
    2) SWAP_SIZE_MB=16384 ;;
    3) SWAP_SIZE_MB=32768 ;;
    4)
      SWAP_FILE=$(swapon --show --noheadings --raw | awk '$1 ~ /^\// {print $1}' | head -n1)

      if [ -z "$SWAP_FILE" ]; then
        echo -e "${RED}‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π swap-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.${NC}"
        return
      fi

      echo -e "${YELLOW}–ù–∞–π–¥–µ–Ω swap-—Ñ–∞–π–ª: ${SWAP_FILE}${NC}"

      echo -e "${YELLOW}–û—Ç–∫–ª—é—á–∞–µ–º swap...${NC}"
      if ! sudo swapoff "$SWAP_FILE"; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, swap —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π.${NC}"
        return
      fi

      if [ -f "$SWAP_FILE" ] && stat -c %F "$SWAP_FILE" | grep -q 'regular file'; then
        echo -e "${YELLOW}–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª...${NC}"
        sudo rm -f "$SWAP_FILE"

        if grep -q "$SWAP_FILE" /etc/fstab 2>/dev/null; then
          sudo sed -i "\|$SWAP_FILE|d" /etc/fstab
          echo -e "${GREEN}–£–¥–∞–ª–µ–Ω–æ –∏–∑ /etc/fstab.${NC}"
        fi

        if grep -qi microsoft /proc/version; then
          if grep -q "swapon $SWAP_FILE" /etc/wsl.conf 2>/dev/null; then
            sudo sed -i "\|swapon $SWAP_FILE|d" /etc/wsl.conf
            echo -e "${GREEN}–£–¥–∞–ª–µ–Ω–æ –∏–∑ /etc/wsl.conf.${NC}"
          fi
        fi

        echo -e "${GREEN}–§–∞–π–ª ${SWAP_FILE} —É–¥–∞–ª—ë–Ω.${NC}"
      else
        echo -e "${RED}‚ùå ${SWAP_FILE} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.${NC}"
      fi

      return
      ;;
    0) return ;;
    *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.${NC}"; return ;;
  esac

  echo -e "${GREEN}–°–æ–∑–¥–∞—ë–º swap-—Ñ–∞–π–ª (${SWAP_SIZE_MB}MB)...${NC}"
  sudo dd if=/dev/zero of=/swapfile bs=1M count=$SWAP_SIZE_MB status=progress
  sudo chmod 600 /swapfile
  sudo mkswap /swapfile
  sudo swapon /swapfile

  if grep -i -q microsoft /proc/version; then
    echo -e "${YELLOW}–î–ª—è WSL –¥–æ–±–∞–≤—å—Ç–µ swapon –≤ /etc/wsl.conf –≤—Ä—É—á–Ω—É—é.${NC}"
  else
    if ! grep -q '/swapfile' /etc/fstab; then
      echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab > /dev/null
      echo -e "${GREEN}–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ /etc/fstab.${NC}"
    fi
  fi

  echo -e "${GREEN}Swap-—Ñ–∞–π–ª (${SWAP_SIZE_MB}MB) —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.${NC}"
}

increase_ulimit() {
  echo -e "${YELLOW}–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤...${NC}"
  OLD_LIMIT=$(ulimit -n)
  echo -e "–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: ${GREEN}${OLD_LIMIT}${NC}"

  ulimit -n 65535 2>/dev/null

  NEW_LIMIT=$(ulimit -n)
  echo -e "–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: ${GREEN}${NEW_LIMIT}${NC}"
}

check_system_resources() {
    TOTAL_RAM_GB=$(free -g | awk '/^Mem:/{print $2}')
    TOTAL_CPU_CORES=$(nproc)
    AVAILABLE_RAM_GB=$((TOTAL_RAM_GB - 2))
    AVAILABLE_CPU_CORES=$((TOTAL_CPU_CORES - 1))

    MAX_NODES=$(( (AVAILABLE_RAM_GB / 4) < (AVAILABLE_CPU_CORES / 2) ? (AVAILABLE_RAM_GB / 4) : (AVAILABLE_CPU_CORES / 2) ))
    MAX_NODES=$(( MAX_NODES < 1 ? 1 : (MAX_NODES > 8 ? 8 : MAX_NODES) ))
    CPUS_PER_NODE=$(awk -v avail="$AVAILABLE_CPU_CORES" -v max="$MAX_NODES" 'BEGIN{printf "%.1f", avail/max}')

    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë          –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏             ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${GREEN}üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:${NC}"
    echo "  –ú–æ–¥–µ–ª—å: $(lscpu | grep 'Model name' | sed 's/Model name: *//')"
    echo "  –Ø–¥–µ—Ä: ${TOTAL_CPU_CORES}"
    echo "  –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–æ–¥: ${AVAILABLE_CPU_CORES}"
    echo ""
    echo -e "${GREEN}üß† –ü–∞–º—è—Ç—å:${NC}"
    echo "  –í—Å–µ–≥–æ RAM: ${TOTAL_RAM_GB}GB"
    echo "  –î–æ—Å—Ç—É–ø–Ω–æ RAM: ${AVAILABLE_RAM_GB}GB"
    echo "  –°–≤–æ–±–æ–¥–Ω–æ: $(free -h | awk '/^Mem:/{print $7}')"
    echo ""
    echo -e "${GREEN}üíæ –î–∏—Å–∫:${NC}"
    if grep -q "WSL" /proc/version 2>/dev/null; then
        df -h /mnt/c | tail -n 1 | awk '{print "  –î–∏—Å–∫ C: " $2 " –≤—Å–µ–≥–æ, " $4 " —Å–≤–æ–±–æ–¥–Ω–æ (" $5 " –∑–∞–Ω—è—Ç–æ)"}'
    else
        df -h / | tail -n 1 | awk '{print "  –ö–æ—Ä–Ω–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª: " $2 " –≤—Å–µ–≥–æ, " $4 " —Å–≤–æ–±–æ–¥–Ω–æ (" $5 " –∑–∞–Ω—è—Ç–æ)"}'
    fi
    echo ""
    echo -e "${GREEN}üîÑ Swap:${NC}"
    if swapon --show | grep -q '/'; then
        swapon --show --bytes | awk 'NR>1 { printf "  Swap-—Ñ–∞–π–ª: %.1fGB\n", $3 / 1024 / 1024 / 1024 }'
    else
        echo "  Swap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    echo ""
    echo -e "${GREEN}üê≥ Docker:${NC}"
    if command -v docker &>/dev/null; then
        DOCKER_VERSION=$(docker --version | awk '{print $3}' | tr -d ',')
        echo "  –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: $DOCKER_VERSION)"
    else
        echo "  –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 2)"
    fi
    echo ""
    echo -e "${GREEN}üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
    echo "  –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥: ${MAX_NODES}"
    echo "  CPU –Ω–∞ –Ω–æ–¥—É: ${CPUS_PER_NODE} —è–¥–µ—Ä"
    echo "  RAM –Ω–∞ –Ω–æ–¥—É: ~4GB"
    INT_CPUS_PER_NODE=${CPUS_PER_NODE%.*}
    echo "  –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: $((MAX_NODES * 4))GB RAM, $((MAX_NODES * INT_CPUS_PER_NODE)) —è–¥–µ—Ä CPU"
    echo ""
}

while true; do
  print_menu
  read -r choice
  case $choice in
    1) check_system_resources ;;
    2) install_docker ;;
    3) install_nexus_node ;;
    4) attach_nexus_container ;;
    5) remove_node ;;
    6) stop_containers ;;
    7) start_containers ;;
    8) create_swap ;;
    9) increase_ulimit ;;
    0) echo "–í—ã—Ö–æ–¥..."; exit 0 ;;
    *) echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 0 –¥–æ 9." ;;
  esac
  echo ""
  echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
  read -r
  clear
done
